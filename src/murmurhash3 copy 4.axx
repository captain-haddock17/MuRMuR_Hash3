-------------------------------------------------------------------------------
-- AdaForge.Crypto.MuRMuRHash3 was written by Austin Appleby, and is placed in the public
-- domain. The author hereby disclaims copyright to this source code.

-- Note - The x86 and x64 versions do _not_ produce the same results, as the
-- algorithms are optimized for their respective platforms. You can still
-- compile and run any of them on any platform, but your performance with the
-- non-native version will be less than optimal.
--
-- https://github.com/aappleby/smhasher/blob/master/src/AdaForge.Crypto.MuRMuRHash3.cpp
-------------------------------------------------------------------------------
-- https://github.com/daisuke-t-jp/MurmurHash-Swift
-- https://github.com/daisuke-t-jp/MurmurHash-Swift/blob/master/Sources/MurmurHash/AdaForge.Crypto.MuRMuRHash3_x86_32.swift
-- https://github.com/daisuke-t-jp/MurmurHash-Swift/blob/master/Sources/MurmurHash/AdaForge.Crypto.MuRMuRHash3Tail.swift
-------------------------------------------------------------------------------
with Ada.Unchecked_Conversion;

package body AdaForge.Crypto.MuRMuRHash3 is
-- use  Interfaces;

   -- function Rotate_Left ( unsigned_32 x, int8_t r ) return unsigned_32 is
   -- begin
   --   return (Shift_Left (x, r)) or (x >> (32 - r));
   -- end Rotate_Left;
   
   -- function Rotate_Left ( unsigned_64 x, int8_t r ) return unsigned_64 is
   -- begin
   --   return (Shift_Left (x, r)) or (x >> (64 - r));
   -- end Rotate_Left;
   
   subtype Key_index is Positive range 1..8;
   type Key_String is array (Key_index) of unsigned_8;
   type Key_String_MemPtr is access all Key_String;
   
   -- function Convert (key_ptr : OBJECT_MemPtr) return Key_String is
   --    Len : Natural := Key'Size/8;
   --    Buffer : array (1 .. Len) of unsigned_32;
    --    Key_String;
      
   function Convert is new Ada.Unchecked_Conversion (
               Source => OBJECT_MemPtr, 
               Target => Key_String_MemPtr);
   
      -------------------------------------------------------------------------------
      -- Block read - if your platform needs to do endian-swapping or can only
      -- handle aligned reads, do the conversion here
   
      function getblock32 ( p : Unsigned_x86_128; i : Integer ) return unsigned_32
      with inline is
      begin
         return p (i);
      end getblock32;
      
      function getblock64 ( p : Unsigned_x64_128; i : Integer ) return unsigned_64
      with inline is
      begin
         return p (i);
      end getblock64;
   
   -------------------------------------------------------------------------------
   -- Finalization mix - force all bits of a hash block to avalanche
   
   function fmix32 ( hash_block : unsigned_32 ) return unsigned_32
   with inline is
      h : unsigned_32 := hash_block;
   begin
     h := h xor Shift_Right (h, 16);
     h := h * 16#85eb_ca6b#;
     h := h xor Shift_Right (h, 13);
     h := h * 16#c2b2_ae35#;
     h := h xor Shift_Right (h, 16);
   
     return h;
   end fmix32;
   
   ------------
   
   function fmix64 ( hash_block : unsigned_64 ) return unsigned_64
   with inline is
      k : unsigned_64 := hash_block;
   begin
     k := k xor Shift_Right (k, 33);
     k := k * 16#ff51_afd7_ed55_8ccd#;
     k := k xor Shift_Right (k, 33);
     k := k * 16#c4ce_b9fe_1a85_ec53#;
     k := k xor Shift_Right (k, 33);
   
     return k;
   end fmix64;
   
   -------------------------------------------------------------------------------
   -- 32 bits hash --
   -------------------------------------------------------------------------------
   
   procedure Hash_x86_32 ( 
               key_ptr : Object_MemPtr;
               seed : unsigned_32;
               result : out unsigned_32) is
   
      h1       : unsigned_32 := seed;
      c1       : constant unsigned_32 := 16#cc9e_2d51#;
      c2       : constant unsigned_32 := 16#1b87_3593#;
   
      -- for COMPUTE
      Data     : aliased Key_String;
      Data_MemPtr : Key_String_MemPtr := Data'Unchecked_Access;  --FIXME
      blocks   : Key_String := key_ptr + nblocks * 4;
      nblocks  : constant Integer := Key_String'Last / 4;
      k1       : unsigned_32;
   
   begin 
      Data_MemPtr := Convert (Key);
   COMPUTE:
      for i in reverse 1 .. nblocks loop
         k1 := getblock32 (blocks, i);
   
         k1 := @ * c1;
         k1 := Rotate_Left (k1, 15);
         k1 := @ * c2;
       
         h1 := h1 xor k1;
         h1 := Rotate_Left (h1, 13); 
         h1 := h1 * 5 + 16#e654_6b64#;
      end loop COMPUTE;
   
   TAIL:
      declare
         tail     : array (1 .. 4) of Key_String := key_ptr + nblocks * 4;
         X        : constant Integer := Key_String'Last mod 4;
         k1 : unsigned_32 := 0;
   
      begin
         if x >= 3 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 16);
         end if;
         if x >= 2 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 8);
         end if;
         if x >= 1 then
            k1 := k1 xor Unsigned_32 (Tail (X));
            k1 := @ * c1; 
            k1 := Rotate_Left (k1, 15); 
            k1 := @ * c2; 
            h1 := h1 xor k1;
         end if;
      end TAIL;
      
   FINALIZE:
      declare
      begin
         h1 := h1 xor Unsigned_32 (Key_String'Last);
         h1 := fmix32 (h1);   
      end FINALIZE;

      result := h1;
   
   end Hash_x86_32; 
   
   -------------------------------------------------------------------------------
   -- 128 bits hash --
   -------------------------------------------------------------------------------
   
      -- ------------------- --
      -- Hash_x86_128 --
      -- ------------------- --
   procedure Hash_x86_128 ( 
               key_ptr : in Object_MemPtr;
               seed : unsigned_32 := 0;
               result : out Unsigned_x86_128 ) is
   
      h1, h2, h3, h4 : unsigned_32 := seed;
      c1       : constant unsigned_32 := 16#239b_961b#; 
      c2       : constant unsigned_32 := 16#ab0e_9789#;
      c3       : constant unsigned_32 := 16#38b3_4ae5#; 
      c4       : constant unsigned_32 := 16#a1e3_8b93#;
   -- for COMPUTE
      Data     : aliased Key_String;
      Data_MemPtr : Key_String_MemPtr := Data'Unchecked_Access;  --FIXME
      nblocks  : constant Integer := Key_String'Last / 16;
      blocks   : unsigned_32 := key_ptr + nblocks * 16;
      k1, k2, k3, k4 : unsigned_32 := 0;
   
   begin
   COMPUTE:
      for i in reverse 1 .. nblocks loop
   
         k1 := getblock32 (blocks, i * 4 + 0);
         k2 := getblock32 (blocks, i * 4 + 1);
         k3 := getblock32 (blocks, i * 4 + 2);
         k4 := getblock32 (blocks, i * 4 + 3);
   
         k1 := @ * c1; 
         k1 := Rotate_Left (k1, 15); 
         k1 := @ * c2;
         h1 := h1 xor k1;
     
         h1 := Rotate_Left (h1, 19); 
         h1 := @ + h2; 
         h1 := h1 * 5 + 16#561c_cd1b#;
     
         k2 := @ * c2; 
         k2 := Rotate_Left (k2, 16); 
         k2 := @ * c3;
         h2 := h2 xor k2;
     
         h2 := Rotate_Left (h2, 17); 
         h2 := @ + h3; 
         h2 := h2 * 5 + 16#0bca_a747#;
     
         k3 := @ * c3; 
         k3 := Rotate_Left (k3, 17); 
         k3 := @ * c4;
         h3 := h3 xor k3;
     
         h3 := Rotate_Left (h3, 15); 
         h3 := @ + h4; 
         h3 := h3 * 5 + 16#96cd_1c35#;
     
         k4 := @ * c4; 
         k4 := Rotate_Left (k4, 18); 
         k4 := @ * c1;
         
         h4 := h4 xor k4;
         h4 := Rotate_Left (h4, 13); 
         h4 := @ + h1; 
         h4 := h4 * 5 + 16#32ac_3b17#;
      end loop COMPUTE;
   
   TAIL:
      declare
         tail     : array (1 .. 16) of unsigned_8 := key_ptr + nblocks * 16;
         X        : constant Integer := Key_String'Last mod 16;
      k1, k2, k3, k4 : unsigned_32 := 0;
      begin
         if X >= 15 then
            k4 := k4 xor Shift_Left (Unsigned_32 (Tail (X)), 16);
         end if;
         if X >= 14 then
            k4 := k4 xor Shift_Left (Unsigned_32 (Tail (X)), 8);
         end if;
         if X >= 13 then
            k4 := k4 xor Shift_Left (Unsigned_32 (Tail (X)), 0);
            k4 := @ * c4;
            k4 := Rotate_Left (k4, 18);
            k4 := @ * c1;
            h4 := h4 xor k4;
         end if;
         if X >= 12 then
            k3 := k3 xor Shift_Left (Unsigned_32 (Tail (X)), 24);
         end if;
         if X >= 11 then
            k3 := k3 xor Shift_Left (Unsigned_32 (Tail (X)), 16);
         end if;
         if X >= 10 then
            k3 := k3 xor Shift_Left (Unsigned_32 (Tail (X)), 8);
         end if;
         if X >= 9 then
            k3 := k3 xor Shift_Left (Unsigned_32 (Tail (X)), 0);
            k3 := @ * c3;
            k3 := Rotate_Left (k3, 17);
            k3 := @ * c4;
            h3 := h3 xor k3;
         end if;
         if X >= 8 then
            k2 := k2 xor Shift_Left (Unsigned_32 (Tail (X)), 24);
         end if;
         if X >= 7 then
            k2 := k2 xor Shift_Left (Unsigned_32 (Tail (X)), 16);
         end if;
         if X >= 6 then
            k2 := k2 xor Shift_Left (Unsigned_32 (Tail (X)), 8);
         end if;
         if X >= 5 then
               k2 := k2 xor Shift_Left (Unsigned_32 (Tail (X)), 0);
               k2 := @ * c2; 
               k2 := Rotate_Left (k2, 16); 
               k2 := @ * c3;
               h2 := h2 xor k2;
         end if;
         if X >= 4 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 24);
         end if;
         if X >= 3 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 16);
         end if;
         if X >= 2 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 8);
         end if;
         if X >= 1 then
            k1 := k1 xor Shift_Left (Unsigned_32 (Tail (X)), 0);
            k1 := @ * c1;
            k1 := Rotate_Left (k1, 15);
            k1 := @ * c2;
            h1 := h1 xor k1;
         end if;
      end TAIL;

   FINALIZE:
      declare
      begin
         h1 := h1 xor Unsigned_32 (Key_String'Last);
         h2 := h2 xor Unsigned_32 (Key_String'Last);
         h3 := h3 xor Unsigned_32 (Key_String'Last);
         h4 := h4 xor Unsigned_32 (Key_String'Last);
      
         h1 := @ + h2; 
         h1 := @ + h3; 
         h1 := @ + h4;
         h2 := @ + h1; 
         h3 := @ + h1; 
         h4 := @ + h1;
      
         h1 := fmix32 (h1);
         h2 := fmix32 (h2);
         h3 := fmix32 (h3);
         h4 := fmix32 (h4);
      
         h1 := @ + h2; 
         h1 := @ + h3; 
         h1 := @ + h4;
         h2 := @ + h1; 
         h3 := @ + h1; 
         h4 := @ + h1;
      end FINALIZE;
      
     result (1) := h1;
     result (2) := h2;
     result (3) := h3;
     result (4) := h4;
   
   end Hash_x86_128;
   
   -- ------------------- --
   -- Hash_x64_128 --
   -- ------------------- --
   procedure Hash_x64_128 ( 
               key_ptr    : in Object_MemPtr; 
               seed   : unsigned_32;
               result : out Unsigned_x64_128) is
   
      key_ptr  : constant unsigned_8 := key;
      h1, h2   : unsigned_64 := seed;
      c1 : constant unsigned_64 := 16#87c3_7b91_1142_53d5#;
      c2 : constant unsigned_64 := 16#4cf5_ad43_2745_937f#;
   
   -- for COMPUTE
      Data     : aliased Key_String;
      Data_MemPtr : Key_String_MemPtr := Data'Unchecked_Access;  --FIXME
      blocks   : constant Key_String := Key;
      nblocks  : constant Integer := Key_String'Last / 16;
      k1, k2   : unsigned_64 := 0;
   
   begin
   COMPUTE:
      for i in 1 .. nblocks loop
         k1 := getblock64 (blocks, i * 2 + 0);
         k2 := getblock64 (blocks, i * 2 + 1);
   
         k1 := @ * c1; 
         k1 := Rotate_Left (k1, 31); 
         k1 := @ * c2;
         h1 := h1 xor k1;
   
         h1 := Rotate_Left (h1, 27);
         h1 := @ + h2;
         h1 := h1 * 5 + 16#52dc_e729#;
   
         k2 := @ * c2;
         k2 := Rotate_Left (k2, 33);
         k2 := @ * c1;
         h2 := h2 xor k2;
   
         h2 := Rotate_Left (h2, 31); 
         h2 := @ + h1;
         h2 := h2 * 5 + 16#3849_5ab5#;
      end loop COMPUTE;
   
   TAIL:
      declare
         tail     : array (1 .. 16) of unsigned_8 := key_ptr + nblocks * 16;
         X        : constant Integer := Key_String'Last mod 16;
         k1, k2   : unsigned_64 := 0;
      begin
         if X >= 15 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 48);
         end if;
         if X >= 14 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 40);
         end if;
         if X >= 13 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 32);
         end if;
         if X >= 12 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 24);
         end if;
         if X >= 11 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 16);
         end if;
         if X >= 10 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 8);
         end if;
         if X >= 9 then 
            k2 := k2 xor Shift_Left (unsigned_64 (tail (X)), 0);
            k2 := @ * c2;
            k2 := Rotate_Left (k2, 33);
            k2 := @ * c1;
            h2 := h2 xor k2;
         end if;
         if X >= 8 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 56);
         end if;
         if X >= 7 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 48);
         end if;
         if X >= 6 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 40);
         end if;
         if X >= 5 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 32);
         end if;
         if X >= 4 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 24);
         end if;
         if X >= 3 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 16);
         end if;
         if X >= 2 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 8);
         end if;
         if X >= 1 then 
            k1 := k1 xor Shift_Left (unsigned_64 (tail (X)), 0);
            k1 := @ * c1;
            k1 := Rotate_Left (k1, 31);
            k1 := @ * c2;
            h1 := h1 xor k1;
         end if;
      end TAIL;
   
   FINALIZE:
      declare
      begin
         h1 := h1 xor Unsigned_64 (Key_String'Last);
         h2 := h2 xor Unsigned_64 (Key_String'Last);
   
         h1 := @ + h2;
         h2 := @ + h1;
   
         h1 := fmix64 (h1);
         h2 := fmix64 (h2);
   
         h1 := @ + h2;
         h2 := @ + h1;
      end FINALIZE;
      
      result (1) := h1;
      result (2) := h2;
   
   end Hash_x64_128;

end AdaForge.Crypto.MuRMuRHash3;